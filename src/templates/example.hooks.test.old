import React, { useState, useEffect, useReducer } from 'react'
import Layout from '../components/layout'
import SEO from '../components/seo'

export default ({ data }) => {
  return (
    <Layout>
      <SEO title="Products" />
      <div>{JSON.stringify(data)}</div>
      <div onClick={() => {}}>CLICK ME FOR DISCOUNT CODE</div>
      <Offers />
    </Layout>
  )
}

function Offers() {
  const [loading, toggleLoading] = useToggle(true)
  const isMobile = useMatchMedia('(max-width: 800px)')
  const email = useFormField()
  const phone = useFormField('+44')
  const [{ count }, dispatch] = useReducer(countReducer, {
    count: 0,
  })

  // did mount, did update
  useEffect(() => {
    setTimeout(() => {
      toggleLoading()
    }, 500)
  }, [])

  function submit() {
    // post to... email.value
  }

  if (loading) return 'loading...'
  if (isMobile) return 'mobile offers'
  return (
    <>
      <input type="text" {...email} />
      <input type="text" {...phone} />
      <button onClick={() => dispatch({ type: 'UP' })}>UP</button>
      <button onClick={() => dispatch({ type: 'DOWN' })}>DOWN</button>
      <div>Count: {count}</div>
    </>
  )
}

export const pageQuery = graphql`
  query Product($id: String!) {
    stripeProduct(id: { eq: $id }) {
      id
      name
    }
  }
`

// hooks.js

function useToggle(initialState = false) {
  const [state, setState] = useState(initialState)

  return [state, () => setState(!state)]
}

function useMatchMedia(query) {
  const [state, setState] = useState()

  function onChange({ matches }) {
    setState(matches)
  }

  useEffect(() => {
    const mql = window.matchMedia(query)
    setState(mql.matches)

    // watch for changes
    mql.addListener(onChange)

    return () => mql.removeListener(onChange)
  }, [])

  return state
}

function useFormField(initialState = '') {
  const [state, setState] = useState(initialState)

  return {
    value: state,
    onChange: e => setState(e.target.value),
  }
}

function countReducer(state = {}, action) {
  if (action.type === 'UP')
    return {
      ...state,
      count: state.count + 1,
    }

  if (action.type === 'DOWN')
    return {
      ...state,
      count: state.count - 1,
    }

  return state
}
